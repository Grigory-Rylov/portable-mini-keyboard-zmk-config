#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

//  ##########################################################
//  ###########        WORKING 2023/07/1       ###############
//  ##########################################################
// #############         LAYERS         #################

#define SYM_L   1
#define NAV_L   2
#define NAV2_L  3

//#define OTHER_L 4

#define DEFAULT 0
#define NAVIGATION   1
#define NUMBERS   2
#define FUNCTION  3
#define MOUSE  4
#define SYMBOLS 5
#define HOTKEYS  6

// Desktop and tab navigation shortcuts		

#define DESKTOP_LT   LC(LG(LEFT))
#define DESKTOP_RT   LC(LG(RIGHT))
#define WINDOW_LT    LA(LS(TAB))
#define WINDOW_RT    LA(TAB)
#define TAB_LT       LC(LS(TAB))
#define TAB_RT       LC(TAB)

// NOT USED  &kp LG(LC(LEFT))  &kp LG(LC(RIGHT))
// Generic bindings

#define KILL_WINDOW  LA(F4)
#define MAXIMIZE     LG(UP)
#define MINIMIZE     LG(DOWN)
#define UN_MINIMIZE  LG(LC(N))

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <500>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <300>;
};

&sl { release-after-ms = <2000>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        ZMK_MACRO(inv_qm,

        wait-ms = <10>;
        tap-ms = <10>;
        bindings =
            <&macro_press &kp LALT>,
            <&macro_tap &kp KP_N1 &kp KP_N6 &kp KP_N8>,
            <&macro_release &kp LALT>;

        )
    };

     combos {
            compatible = "zmk,combos";

            combo_y {
                timeout-ms = <50>;
                key-positions = <9 12>;
                bindings = <&kp Y>;
            };

            combo_w {
                            timeout-ms = <50>;
                            key-positions = <9 6>;
                            bindings = <&kp W>;
            };
            combo_k {
                            timeout-ms = <50>;
                            key-positions = <3 12>;
                            bindings = <&kp K>;
            };
            combo_v {
                timeout-ms = <50>;
                key-positions = <9 18>;
                bindings = <&kp V>;
            };
            combo_x {
                timeout-ms = <50>;
                key-positions = <15 12>;
                bindings = <&kp X>;
            };
            combo_z {
                timeout-ms = <50>;
                key-positions = <9 13>;
                bindings = <&kp Z>;
            };
            combo_j {
                timeout-ms = <50>;
                key-positions = <8 12>;
                bindings = <&kp J>;
            };
            combo_q {
                timeout-ms = <50>;
                key-positions = <9 11>;
                bindings = <&kp Q>;
            };
            combo_enter {
                timeout-ms = <50>;
                key-positions = <14 19>;
                bindings = <&kp ENTER>;
            };
            combo_esc {
                timeout-ms = <50>;
                key-positions = <2 7>;
                bindings = <&kp ESCAPE>;
            };
        };

    behaviors {
        //   td_mt_ls: tap_dance_mod_tap {
        //       compatible = "zmk,behavior-tap-dance";
        //       label = "TAP_DANCE_LSHIFT";
        //       #binding-cells = <0>;
        //       tapping-term-ms = <200>;
        //       bindings = <&mt LSHIFT CAPSLOCK>, <&kp LCTRL>;
        //   };
        //   td_mt_rs: tap_dance_mod_tap {
        //       compatible = "zmk,behavior-tap-dance";
        //       label = "TAP_DANCE_RSHIFT";
        //       #binding-cells = <0>;
        //       tapping-term-ms = <200>;
        //       bindings = <&mt RSHIFT CAPSLOCK>, <&kp RCTRL>;
        //   };            
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 1 SPACE                              &lt 2 TAB
&kp U        &kp N  &kp H  &kp G  &kp S  &kp D
&kp R        &kp A  &kp O  &kp T  &kp E  &kp I
&kp P        &kp L  &kp B  &kp F  &kp C  &kp M
            >;
        };

        NAVIGATION {
            bindings = <
&trans                                                                           &lt 3 SLASH
&kp ESCAPE      &kp Q           &kp BACKSPACE  &kp COMMA         &kp UP_ARROW    &kp PERIOD
&kp LEFT_BRACE  &kp LEFT_SHIFT  &kp ENTER      &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW
&kp HOME        &none           &kp END        &kp LEFT_BRACKET  &kp SQT         &kp RIGHT_BRACKET
            >;
        };

        FUNCTION {
            bindings = <
&trans                                                                 &trans
&kp LBKT   &kp Q           &kp UNDERSCORE  &kp N7        &kp N8        &kp N9
&kp MINUS  &kp LEFT_SHIFT  &kp PLUS        &kp NUMBER_4  &kp N5        &kp NUMBER_6
&kp LSHFT  &kp EQUAL       &kp N0          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3
            >;
        };

        NUMBERS {
            bindings = <
&kp SPACE                              &kp RSHFT
&kp LBKT   &kp Q  &kp W  &kp E  &kp R  &kp T
&kp LCTRL  &kp A  &kp S  &kp D  &kp F  &kp G
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B
            >;
        };

        MOUSE {
            bindings = <
&kp SPACE                              &kp RSHFT
&kp LBKT   &kp Q  &kp W  &kp E  &kp R  &kp T
&kp LCTRL  &kp A  &kp S  &kp D  &kp F  &kp G
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B
            >;
        };

        SYMBOLS {
            bindings = <
&kp SPACE                              &kp RSHFT
&kp LBKT   &kp Q  &kp W  &kp E  &kp R  &kp T
&kp LCTRL  &kp A  &kp S  &kp D  &kp F  &kp G
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B
            >;
        };
    };
};
